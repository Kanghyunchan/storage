import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class SystemFileManager {
    private File[] files = new File[5]; // 고객, 객실, 예약 3개만.
    private CustomerManager customerManager;
    private RoomManager roomManager;
    private ReservationManager reservationManager;
    private ReviewManager reviewManager;
    private SalesRecordManager salesRecordManager;

    public SystemFileManager(CustomerManager cm, RoomManager rm, ReservationManager rvm, ReviewManager rwm, SalesRecordManager srm) {
        files[0] = new File("CustomerDB.txt");
        files[1] = new File("RoomDB.txt");
        files[2] = new File("ReservationDB.txt");
        files[3] = new File("ReviewDB.txt");
        files[4] = new File("SalesRecordDB.txt");
        try {
            for (File f : files) {
                if (!f.exists())
                    f.createNewFile();
            }
        } catch (IOException e) {
            System.out.println(e + "파일 생성 실패");
        }
        customerManager = cm;
        roomManager = rm;
        reservationManager = rvm;
        reviewManager = rwm;
        salesRecordManager = srm;
    }

    public void loadFromFile() {
        BufferedReader reader = null;
        String str;
        String cut[];
        int count = 0;
        try {
            for (File f : files) {
                reader = new BufferedReader(new FileReader(f));
                while ((str = reader.readLine()) != null) {
                    switch (count) {
                        case 0:
                            cut = str.split(",");
                            customerManager.addCustomer(new Customer(cut[0], cut[1], cut[2], cut[3]));
                            break;
                        case 1:
                            cut = str.split(",");
                            roomManager.addRoom(
                                    new Room(cut[0], cut[1], Integer.parseInt(cut[2]), Integer.parseInt(cut[3]), cut[4]));
                            break;
                        case 2:
                            cut = str.split(",");
                            reservationManager.addReservation(new Reservation(cut[0], cut[1], cut[2],
                                    LocalDate.parse(cut[3]), LocalDate.parse(cut[4]), Integer.parseInt(cut[5])));
                            reservationManager.findById(cut[0]).setStatus(cut[6]);
                            break;
                        case 3:
                            cut = str.split(",");
                            reviewManager.addReview(new Review(cut[0], cut[1], cut[2], cut[3], Integer.parseInt(cut[4])));
                            break;
                        case 4:
                            cut = str.split(",");
                            salesRecordManager.addOrUpdateRecord(new SalesRecord(cut[0], Integer.parseInt(cut[1]), Integer.parseInt(cut[2])), false);
                            break;
                    }
                }
                count++;
                reader.close();
            }
        } catch (IOException e) {
            System.out.println(e + "파일 읽기 실패");
        }
    }

    public void saveToFile() {
        BufferedWriter writer = null;
        int count = 0;
        try {
            for (File f : files) {
                writer = new BufferedWriter(new FileWriter(f));
                switch (count) {
                    case 0:
                        for (Customer c : customerManager.getCustomerList()) {
                            if (c != null) {
                                writer.write(c.toString(true));
                                writer.newLine();
                            }
                        }
                        writer.flush();
                        writer.close();
                        break;
                    case 1:
                        for (Room r : roomManager.getRoomList()) {
                            if (r != null) {
                                writer.write(r.toString(true));
                                writer.newLine();
                            }
                        }
                        writer.flush();
                        writer.close();
                        break;
                    case 2:
                        for (Reservation rv : reservationManager.getReservationList()) {
                            if (rv != null) {
                                writer.write(rv.toString(true));
                                writer.newLine();
                            }
                        }
                        writer.flush();
                        writer.close();
                        break;
                    case 3:
                        for (Review rw : reviewManager.getReviewsList()) {
                            if (rw != null) {
                                writer.write(rw.toString(true));
                                writer.newLine();
                            }
                        }
                        writer.flush();
                        writer.close();
                        break;
                    case 4:
                        salesRecordManager.getRecords().sort((o1, o2) -> {
                            int firstYm = Integer.parseInt(o1.getYearMonth().replace("-", ""));
                            int secondYm = Integer.parseInt(o2.getYearMonth().replace("-", ""));
                            if(firstYm < secondYm) return -1;
                            else if(firstYm == secondYm) return 0;
                            else return 1;
                        });
                        for(SalesRecord sr : salesRecordManager.getRecords()){
                            if(sr != null){
                                writer.write(sr.toString(true));
                                writer.newLine();
                            }
                        }
                        writer.flush();
                        writer.close();
                        break;
                }
                count++;
            }
        } catch (IOException e) {
            System.out.println(e + "파일 저장 실패");
        }
    }
}
