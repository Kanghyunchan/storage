전역변수에 정수배열 저장.
.section .data
배열접근 -> 전역변수 시작주소(정의할땐 레이블(:), 사용할땐 심볼)
변위주소지정방식(인덱스된 주소 지정)
            시작주소(, 인덱스, 원소크기)
|                         레지스터     
배열의 끝 검사 
1. 인덱스 크기 아무 레지스터에 넣어두고 인덱스 크기 레지스터(edi, esi)랑 
검사해서 같으면 종료
2. 배열 끝에 0을 넣고 0이면 종료
최대값 임시저장

STACK 최상위 주소는 %esp(SP 스택포인트)
pushl(저장), popl(꺼냄) 꺼낼때마다 esp값은 감소
popl없이 %esp접근
movl (%esp), %eax
movl %esp, %eax
movl 4(%esp), %eax

PC(program counter): 호출코드의 원래 위치
함수이름: 실행해야하는 코드 이름
매개변수, 지역변수 -> 스택에 저장(스택의 크기, 프로세스크기 만큼 할당) 
1~4MB정도 제한.

C호출규약(C calling convention)
C컴파일러가 C로 작성한 코드를(함수) 어떤 형식의 기계어로 변환할건지
-스택에 쌓는 순서 

점프했다가 복귀
movl %eip, %esp  스택포인트에 현재 함수 시작주소 이동
addl $4, %esp   스택포인트 증가
jmp _________   점프

call 레이블
push %eip
jmp_______


이전 함수의 %ebp(base point 현재 함수에서 사용하는 스택 데이터 시작점)
값을 스택에 백업 
베이스 주소 지정사용. OFFSET(%BASE)

Stack Frame 내 데이터 접근
%ebp 기준으로 베이스 주소 지정 방식
파라미터: %ebp 기준으로 양수(+) offset
함수 호출 이전에 push
복귀주소: 4(%ebp)
저장된 이전 %ebp: (%ebp) 또는 0(%ebp)
지역변수: %ebp 기준으로 음수(-) offset

함수 실행 종료 전 수행해야 하는 일
%eax에 리턴 값 저장(규약)
스택을 이전 상태로 복원
movl %ebp, %esp
popl %ebp
ret 명령으로 이전 코드로 복귀
ret: %esp 주소의 값(복귀주소)을 popl하여 %eip에 저장

C호출규약
준비작업: 파라미터를 stack에 push
함수호출: call
함수시작: ebp 백업. 새로운 ebp지정(esp). 지역변수할당(esp감소)
함수종료시 stack 복구: ebp복원, ret명령.

